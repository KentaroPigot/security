security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      custom_authenticators:
        - App\Security\LoginFormAuthenticator
        - App\Security\ApiTokenAuthenticator
        entry_point: App\Security\LoginFormAuthenticator
      # form_login:
      #   login_path: app_login
      #   check_path: app_login
      #   enable_csrf: true
      logout:
        path: app_logout
      remember_me:
        secret: "%kernel.secret%" # Cette valeur doit être la même que la clé secrète de votre application
        lifetime: 31536000 # Durée du cookie "remember me" en secondes (par exemple, 1 an)

    # where to redirect after logout
    # target: app_any_route
    # https://symfony.com/doc/current/security/impersonating_user.html
    switch_user: true

  role_hierarchy:
    ROLE_ADMIN:
      [ROLE_ADMIN_COMMENT, ROLE_ADMIN_ARTICLE, ROLE_ALLOWED_TO_SWITCH]
      # ROLE_EDITOR: ROLE_ADMIN_ARTICLE

    # activate different ways to authenticate
    # https://symfony.com/doc/current/security.html#the-firewall

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Tout le monde est anonymous ! Donc tout le monde à accès
    # - { path: ^/, roles: IS_AUTHENTICATED_FULLY } # Toutes les pages auront besoin d'être login
    # - { path: ^/, roles: IS_AUTHENTICATED_REMEMBERED } # Fonctionne si on a un remember me cookie, même si on est pas login
    #  En gros c'est differents niveaux de sécurité. IS_AUTHENTICATED_ANONYMOUSLY < IS_AUTHENTICATED_REMEMBERED < IS_AUTHENTICATED_FULLY

  # - { path: ^/account, roles: IS_AUTHENTICATED_FULLY } # Dès que le user est login
  # - { path: ^/admin, roles: ROLE_ADMIN }
  # - { path: ^/profile, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
